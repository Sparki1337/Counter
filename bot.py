from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import re
import datetime
import os
import json
import difflib
import qrcode
from io import BytesIO
import traceback

class QRStates(StatesGroup):
    waiting_for_qr_text = State()

class Colors:
    RESET = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"
    
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"
    
    BG_BLACK = "\033[40m"
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"
    BG_MAGENTA = "\033[45m"
    BG_CYAN = "\033[46m"
    BG_WHITE = "\033[47m"

LOG_DIR = "logs"
QR_CODE_DIR = "qrcodes"
LOG_FILE = os.path.join(LOG_DIR, f"bot_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
USER_DATA_FILE = "user_data.json"

os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(QR_CODE_DIR, exist_ok=True)

def log_message(message_type, user_id=None, username=None, action=None, details=None):
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    color_code = Colors.RESET
    if message_type == "ERROR":
        color_code = Colors.RED
    elif message_type == "WARNING":
        color_code = Colors.YELLOW
    elif message_type == "COMMAND":
        color_code = Colors.GREEN
    elif message_type == "MESSAGE":
        color_code = Colors.CYAN
    elif message_type == "INFO":
        color_code = Colors.WHITE
    elif message_type == "SYSTEM":
        color_code = Colors.MAGENTA
    
    user_str = f"{user_id}" if user_id else "---"
    
    username_str = username or "---"
    
    log_str = f"{current_time} {color_code}{message_type.ljust(7)}{Colors.RESET}"
    log_str += f" | {user_str.ljust(10)} | {username_str.ljust(12)}"
    
    if action:
        log_str += f" | {action}"
    
    if details:
        log_str += f": {details}"
    
    print(log_str)
    
    file_log = {
        "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "type": message_type,
        "user_id": user_id,
        "username": username,
        "action": action,
        "details": details
    }
    
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(json.dumps(file_log, ensure_ascii=False) + "\n")

def load_all_user_data():
    global user_data
    try:
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
                data_from_file = json.load(f)
                user_data = {int(k): v for k, v in data_from_file.items()}
                for uid in user_data:
                    if 'qr_codes' not in user_data[uid]:
                        user_data[uid]['qr_codes'] = {'next_qr_id': 1, 'codes': []}
                    if 'next_qr_id' not in user_data[uid]['qr_codes']: 
                         user_data[uid]['qr_codes']['next_qr_id'] = 1
                    if 'codes' not in user_data[uid]['qr_codes']:
                         user_data[uid]['qr_codes']['codes'] = []

                log_message("SYSTEM", action="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", details=f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {USER_DATA_FILE}")
        else:
            user_data = {}
            log_message("SYSTEM", action="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", details=f"–§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è –±–∞–∑–∞.")
    except (json.JSONDecodeError, IOError) as e:
        user_data = {}
        log_message("ERROR", action="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", details=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {USER_DATA_FILE}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è –±–∞–∑–∞.")

def save_all_user_data():
    global user_data
    try:
        data_to_save = {str(k): v for k, v in user_data.items()}
        with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=4)
    except IOError as e:
        log_message("ERROR", action="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", details=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {USER_DATA_FILE}: {e}")

def log_user_state(user_id):
    if user_id not in user_data:
        log_message("DEBUG", user_id, action="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", details="–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    
    state = user_data[user_id]
    count = state.get('count', 0)
    values = state.get('values', {})
    
    log_message("DEBUG", user_id, action="–°–æ—Å—Ç–æ—è–Ω–∏–µ", 
               details=f"–°–æ–æ–±—â–µ–Ω–∏–π: {count}, –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(values)}")
    
    if values:
        values_str = ", ".join([f"{k}={v}" for k, v in values.items()])
        log_message("DEBUG", user_id, action="–ó–Ω–∞—á–µ–Ω–∏—è", details=values_str)

bot = Bot(token="7813948080:AAGH0qdzgzJdWYl80wYiSp5omPcm95zIOYo")
dp = Dispatcher()

user_data = {}

def get_keyboard():
    buttons = [
        [KeyboardButton(text="üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç")],
        [KeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="üñºÔ∏è QR –ö–æ–¥—ã")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return keyboard

def get_qr_keyboard():
    buttons = [
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å QR")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ QR")],
        [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å QR")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return keyboard

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    if user_id not in user_data:
        user_data[user_id] = {
            'count': 0,
            'values': {},
            'qr_codes': {'next_qr_id': 1, 'codes': []}
        }
        log_message("INFO", user_id, username, action="–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                   details="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ä–∞–∑–¥–µ–ª QR")
    elif 'qr_codes' not in user_data[user_id]:
        user_data[user_id]['qr_codes'] = {'next_qr_id': 1, 'codes': []}
        log_message("INFO", user_id, username, action="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                   details="–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª QR –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    if 'qr_codes' not in user_data[user_id]:
        user_data[user_id]['qr_codes'] = {'next_qr_id': 1, 'codes': []}
    if 'next_qr_id' not in user_data[user_id]['qr_codes']:
        user_data[user_id]['qr_codes']['next_qr_id'] = 1
    if 'codes' not in user_data[user_id]['qr_codes']:
        user_data[user_id]['qr_codes']['codes'] = []

    save_all_user_data()

    log_message("COMMAND", user_id, username, action="–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø–æ–¥—Å—á–µ—Ç–µ —Å—É–º–º –∏ QR-–∫–æ–¥–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
        "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–¥—Å—á–µ—Ç–∞\n"
        "üîÑ –û—á–∏—Å—Ç–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—á–µ—Å—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã\n\n"
        "üñºÔ∏è QR –ö–æ–¥—ã - –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞–º–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ - —á–∏—Å–ª–æ",
        reply_markup=get_keyboard()
    )

@dp.message(lambda message: message.text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å")
async def clear_command(message: types.Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        
        log_message("COMMAND", user_id, username, action="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å'")
        
        if user_id in user_data:
            if user_data[user_id]['count'] > 0:
                user_data[user_id]['count'] -= 1
                
                if 'last_message' in user_data[user_id]:
                    last_message = user_data[user_id]['last_message']
                    lines = last_message.split('\n')
                    
                    log_message("DEBUG", user_id, username, action="–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                               details=f"–†–∞–∑–±–æ—Ä {len(lines)} —Å—Ç—Ä–æ–∫")
                    
                    removed_values = []
                    
                    for i, line in enumerate(lines):
                        line = line.strip()
                        if not line:
                            continue
                        
                        log_message("DEBUG", user_id, username, action="–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏", 
                                   details=f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line}")
                        
                        name, value = parse_line(line)
                        if name and value is not None:
                            similar_category = find_similar_category(name, user_data[user_id]['values'])
                            
                            if similar_category != name:
                                log_message("DEBUG", user_id, username, action="–ü–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 
                                           details=f"'{name}' –ø–æ—Ö–æ–∂–∞ –Ω–∞ '{similar_category}'")
                                name = similar_category
                            
                            if name in user_data[user_id]['values']:
                                old_value = user_data[user_id]['values'][name]
                                
                                user_data[user_id]['values'][name] -= value
                                
                                log_message("DEBUG", user_id, username, action="–í—ã—á–∏—Ç–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è", 
                                           details=f"{name}: {old_value} - {value} = {user_data[user_id]['values'][name]}")
                                
                                removed_values.append(f"{name}: {value}")
                            else:
                                log_message("WARNING", user_id, username, action="–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", 
                                           details=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {line}")
                        else:
                            log_message("WARNING", user_id, username, action="–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", 
                                       details=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å: {line}")
                    
                    del user_data[user_id]['last_message']
                    
                    log_message("INFO", user_id, username, action="–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                               details=f"–£–¥–∞–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(removed_values) if removed_values else '–Ω–µ—Ç'}")
                    
                    msg_count = user_data[user_id]['count']
                    if msg_count == 0:
                        user_data[user_id]['values'] = {}

                    log_user_state(user_id)
                    save_all_user_data() 
                    if msg_count == 0:
                        await message.reply("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç.", reply_markup=get_keyboard())
                    else:
                        progress_bar = create_progress_bar(msg_count, 6)
                        response = f"{progress_bar} ({msg_count}/6)\n\n"
                        for name, value in user_data[user_id]['values'].items():
                            response += f"{name} - {value}\n"
                        await message.reply(response, reply_markup=get_keyboard())
                else:
                    log_message("INFO", user_id, username, action="–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                               details="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                    
                    await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_keyboard())
            else:
                log_message("INFO", user_id, username, action="–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                           details="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
                
                await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=get_keyboard())
        else:
            log_message("INFO", user_id, username, action="–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                       details="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            
            await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=get_keyboard())
    
    except Exception as e:
        log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", 
                   details=str(e))
        
        print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:{Colors.RESET}\n{tb}")
        
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                           reply_markup=get_keyboard())

@dp.message(lambda message: message.text == "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç")
async def new_count(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    log_message("COMMAND", user_id, username, action="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç'")
    
    current_qr_data = {}
    if user_id in user_data and 'qr_codes' in user_data[user_id]:
        current_qr_data = user_data[user_id]['qr_codes']

    user_data[user_id] = {
        'count': 0,
        'values': {},
        'qr_codes': current_qr_data
    }
    
    if not user_data[user_id]['qr_codes']:
        user_data[user_id]['qr_codes'] = {'next_qr_id': 1, 'codes': []}
    if 'next_qr_id' not in user_data[user_id]['qr_codes']:
        user_data[user_id]['qr_codes']['next_qr_id'] = 1
    if 'codes' not in user_data[user_id]['qr_codes']:
        user_data[user_id]['qr_codes']['codes'] = []

    log_message("INFO", user_id, username, action="–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç", 
               details="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã (–∫—Ä–æ–º–µ QR)")
    
    log_user_state(user_id)
    save_all_user_data()
    
    await message.reply(
        "–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ - —á–∏—Å–ª–æ",
        reply_markup=get_keyboard()
    )

@dp.message(lambda message: message.text == "‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def show_instructions(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    log_message("COMMAND", user_id, username, action="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'")
    
    instructions = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "–ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–∂–∞—Ç—å ‚û°Ô∏è /start\n\n"
        "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–¥—Å—á–µ—Ç–∞ (–¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è).\n\n"
        "üîÑ –û—á–∏—Å—Ç–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—á–µ—Å—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã.\n\n"
        "üñºÔ∏è QR –ö–æ–¥—ã - –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞–º–∏.\n\n"
        "  –í —Ä–∞–∑–¥–µ–ª–µ QR –ö–æ–¥–æ–≤:\n"
        "  ‚ûï –°–æ–∑–¥–∞—Ç—å QR - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π QR-–∫–æ–¥ –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É.\n"
        "  üìã –°–ø–∏—Å–æ–∫ QR - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π.\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ - —á–∏—Å–ª–æ\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—É–º–º–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ê–¢–¢ –ü–ë —ç–∫–∑–æ—Ç–∏–∫ 0,25\" –∏ \"–ê–¢–¢ –ü–ë —ç–∫–∑–æ—Ç–∏–∫ 0,25–ª\" –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π).\n\n"
        "–ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ - 6."
    )
    await message.reply(instructions, reply_markup=get_keyboard())

def create_progress_bar(current, total, length=10):
    filled = int(length * current / total)
    return '‚ñà' * filled + '‚ñí' * (length - filled)

def parse_line(line):
    if ':' in line:
        parts = line.split(':')
        separator = ':'
    elif '-' in line:
        parts = line.split('-')
        separator = '-'
    else:
        log_message("DEBUG", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                  details=f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
        return None, None

    if len(parts) >= 2:
        original_name = parts[0].strip()
        name = ' '.join(parts[0].split())
        
        if original_name != name:
            log_message("DEBUG", action="–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏", 
                      details=f"'{original_name}' -> '{name}'")
        
        value_part = parts[1].strip()
        
        try:
            value = int(value_part)
            return name, value
        except ValueError:
            numbers = re.findall(r'-?\d+', value_part)
            if numbers:
                value = int(numbers[-1])
                log_message("DEBUG", action="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞", 
                          details=f"–ò–∑ '{value_part}' –ø–æ–ª—É—á–µ–Ω–æ: {value}")
                return name, value
            else:
                log_message("WARNING", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                          details=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑: {value_part}")
    else:
        log_message("WARNING", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                  details=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
    
    return None, None

@dp.message(lambda message: message.text == "üñºÔ∏è QR –ö–æ–¥—ã")
async def qr_codes_section(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    log_message("COMMAND", user_id, username, action="–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª 'QR –ö–æ–¥—ã'")
    await message.reply("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ QR-–∫–æ–¥–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_qr_keyboard())

@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    log_message("COMMAND", user_id, username, action="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ QR")
    await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_keyboard())

@dp.message(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å QR")
async def request_qr_text_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    log_message("COMMAND", user_id, username, action="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–æ–∑–¥–∞—Ç—å QR'")
    await state.set_state(QRStates.waiting_for_qr_text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ QR-–∫–æ–¥:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(QRStates.waiting_for_qr_text)
async def generate_qr_code_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    qr_text = message.text

    if not qr_text:
        log_message("WARNING", user_id, username, action="–°–æ–∑–¥–∞–Ω–∏–µ QR", details="–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è QR")
        await message.reply("–¢–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_qr_keyboard())
        await state.clear()
        return

    log_message("MESSAGE", user_id, username, action="–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è QR", details=qr_text)

    try:
        if user_id not in user_data:
             user_data[user_id] = {'count': 0, 'values': {}, 'qr_codes': {'next_qr_id': 1, 'codes': []}}
        elif 'qr_codes' not in user_data[user_id]:
            user_data[user_id]['qr_codes'] = {'next_qr_id': 1, 'codes': []}
        if 'next_qr_id' not in user_data[user_id]['qr_codes']:
            user_data[user_id]['qr_codes']['next_qr_id'] = 1
        if 'codes' not in user_data[user_id]['qr_codes']:
            user_data[user_id]['qr_codes']['codes'] = []

        existing_qr = None
        for qr_code_item in user_data[user_id]['qr_codes']['codes']:
            if qr_code_item['text'] == qr_text:
                existing_qr = qr_code_item
                break
        
        if existing_qr:
            log_message("INFO", user_id, username, action="–°–æ–∑–¥–∞–Ω–∏–µ QR", details=f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π QR —Å —Ç–µ–∫—Å—Ç–æ–º: {qr_text}")
            try:
                filepath = existing_qr['filepath']
                if not os.path.exists(filepath):
                    log_message("WARNING", user_id, username, action="–°–æ–∑–¥–∞–Ω–∏–µ QR", details=f"–§–∞–π–ª –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ QR –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
                    img_regen = qrcode.make(qr_text)
                    img_regen.save(filepath)
                    log_message("INFO", user_id, username, action="QR —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏", details=f"–§–∞–π–ª: {filepath}")

                with open(filepath, "rb") as qr_file_to_send:
                    qr_image_file = BufferedInputFile(qr_file_to_send.read(), filename=os.path.basename(filepath))
                    await message.reply_photo(photo=qr_image_file, caption=f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å QR-–∫–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:\n'{qr_text}'", reply_markup=get_qr_keyboard())
            except Exception as e_send:
                log_message("ERROR", user_id, username, action="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ QR", details=str(e_send))
                await message.reply(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å QR-–∫–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:\n'{qr_text}'\n–ù–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–µ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ.", reply_markup=get_qr_keyboard())
            await state.clear()
            return

        qr_id = user_data[user_id]['qr_codes']['next_qr_id']
        
        img = qrcode.make(qr_text)
        
        filename = f"qr_user{user_id}_id{qr_id}.png"
        filepath = os.path.join(QR_CODE_DIR, filename)
        img.save(filepath)
        log_message("INFO", user_id, username, action="QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª", details=f"–ü—É—Ç—å: {filepath}")

        user_data[user_id]['qr_codes']['codes'].append({'id': qr_id, 'text': qr_text, 'filepath': filepath})
        user_data[user_id]['qr_codes']['next_qr_id'] += 1
        save_all_user_data()
        
        log_message("INFO", user_id, username, action="QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", details=f"ID: {qr_id}, –¢–µ–∫—Å—Ç: {qr_text}, –§–∞–π–ª: {filepath}")

        try:
            with open(filepath, "rb") as qr_file_to_send:
                qr_image_file = BufferedInputFile(qr_file_to_send.read(), filename=filename)
                await message.reply_photo(photo=qr_image_file, caption=f"–í–∞—à QR-–∫–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:\n'{qr_text}'", reply_markup=get_qr_keyboard())
        except FileNotFoundError:
            log_message("ERROR", user_id, username, action="–û—Ç–ø—Ä–∞–≤–∫–∞ QR", details=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            await message.reply("QR-–∫–æ–¥ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=get_qr_keyboard())
            
    except Exception as e:
        log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR", details=str(e))
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_qr_keyboard())
    
    await state.clear()

@dp.message(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å QR")
async def request_delete_qr_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    log_message("COMMAND", user_id, username, action="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–£–¥–∞–ª–∏—Ç—å QR'")

    if user_id in user_data and user_data[user_id]['qr_codes']['codes']:
        qr_list = user_data[user_id]['qr_codes']['codes']
        
        if not qr_list:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç QR-–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_qr_keyboard())
            return

        inline_buttons = []
        for qr_item in qr_list:
            button_text = qr_item['text'][:20] + "..." if len(qr_item['text']) > 20 else qr_item['text']
            inline_buttons.append([InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å: {button_text}", callback_data=f"delete_qr_{qr_item['id']}")])
        
        if not inline_buttons:
             await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ QR-–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_qr_keyboard())
             return

        keyboard_inline = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ QR-–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è):", reply_markup=keyboard_inline)
        
    else:
        log_message("INFO", user_id, username, action="–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ QR", details="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç QR-–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_qr_keyboard())

@dp.callback_query(lambda c: c.data and c.data.startswith('delete_qr_'))
async def process_delete_qr_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or callback_query.from_user.first_name
    qr_id_to_delete = int(callback_query.data.split('_')[-1])

    log_message("CALLBACK", user_id, username, action="–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ QR (—à–∞–≥ 1)", details=f"ID QR: {qr_id_to_delete}")

    qr_to_delete = None
    if user_id in user_data and 'qr_codes' in user_data[user_id] and 'codes' in user_data[user_id]['qr_codes']:
        for qr_code in user_data[user_id]['qr_codes']['codes']:
            if qr_code['id'] == qr_id_to_delete:
                qr_to_delete = qr_code
                break

    if qr_to_delete:
        text_preview = qr_to_delete['text'][:30] + "..." if len(qr_to_delete['text']) > 30 else qr_to_delete['text']
        confirm_buttons = [
            [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{qr_id_to_delete}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
        ]
        keyboard_confirm = InlineKeyboardMarkup(inline_keyboard=confirm_buttons)
        await callback_query.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å QR-–∫–æ–¥ —Å —Ç–µ–∫—Å—Ç–æ–º:\n'{text_preview}'?", reply_markup=keyboard_confirm)
    else:
        await callback_query.message.edit_text("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.", reply_markup=None)
        await callback_query.answer("–û—à–∏–±–∫–∞: QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        log_message("ERROR", user_id, username, action="–£–¥–∞–ª–µ–Ω–∏–µ QR (—à–∞–≥ 1)", details=f"QR —Å ID {qr_id_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await callback_query.answer()

@dp.callback_query(lambda c: c.data and (c.data.startswith('confirm_delete_') or c.data == 'cancel_delete'))
async def process_confirm_delete_qr_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or callback_query.from_user.first_name

    if callback_query.data == 'cancel_delete':
        log_message("CALLBACK", user_id, username, action="–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è QR")
        await callback_query.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    qr_id_to_delete = int(callback_query.data.split('_')[-1])
    log_message("CALLBACK", user_id, username, action="–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è QR", details=f"ID QR: {qr_id_to_delete}")

    deleted = False
    qr_text_deleted = ""
    if user_id in user_data and 'qr_codes' in user_data[user_id] and 'codes' in user_data[user_id]['qr_codes']:
        qr_codes_list = user_data[user_id]['qr_codes']['codes']
        qr_to_remove_data = None
        for i, qr_code in enumerate(qr_codes_list):
            if qr_code['id'] == qr_id_to_delete:
                qr_to_remove_data = qr_code
                qr_text_deleted = qr_code['text']
                if os.path.exists(qr_code['filepath']):
                    try:
                        os.remove(qr_code['filepath'])
                        log_message("INFO", user_id, username, action="–§–∞–π–ª QR —É–¥–∞–ª–µ–Ω", details=f"–§–∞–π–ª: {qr_code['filepath']}")
                    except OSError as e:
                        log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ QR", details=f"–§–∞–π–ª: {qr_code['filepath']}, –û—à–∏–±–∫–∞: {e}")
                else:
                    log_message("WARNING", user_id, username, action="–§–∞–π–ª QR –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", details=f"–§–∞–π–ª: {qr_code['filepath']}")
                
                del qr_codes_list[i]
                deleted = True
                break
    
    if deleted:
        save_all_user_data()
        text_preview = qr_text_deleted[:30] + "..." if len(qr_text_deleted) > 30 else qr_text_deleted
        await callback_query.message.edit_text(f"QR-–∫–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:\n'{text_preview}'\n—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=None)
        await callback_query.answer("QR-–∫–æ–¥ —É–¥–∞–ª–µ–Ω!")
        log_message("INFO", user_id, username, action="QR —É–¥–∞–ª–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö", details=f"ID: {qr_id_to_delete}, –¢–µ–∫—Å—Ç: {qr_text_deleted}")
    else:
        await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å QR-–∫–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ.", reply_markup=None)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
        log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è QR –∏–∑ –¥–∞–Ω–Ω—ã—Ö", details=f"ID: {qr_id_to_delete}, QR –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ QR")
async def list_qr_codes_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    if user_id in user_data and user_data[user_id]['qr_codes']['codes']:
        log_message("COMMAND", user_id, username, action="–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ QR-–∫–æ–¥–æ–≤")
        
        qr_list = user_data[user_id]['qr_codes']['codes']
        
        if not qr_list:
            await message.reply("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π!", reply_markup=get_qr_keyboard())
            return

        inline_buttons = []
        for qr_item in qr_list:
            button_text = qr_item['text'][:20] + "..." if len(qr_item['text']) > 20 else qr_item['text']
            inline_buttons.append([InlineKeyboardButton(text=f"QR: {button_text}", callback_data=f"show_qr_{qr_item['id']}")])
        
        if not inline_buttons:
             await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ QR-–∫–æ–¥–æ–≤.", reply_markup=get_qr_keyboard())
             return

        keyboard_inline = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
        await message.reply("–í–∞—à–∏ QR-–∫–æ–¥—ã (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å):", reply_markup=keyboard_inline)
        
    else:
        log_message("INFO", user_id, username, action="–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ QR", details="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        await message.reply("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π!", reply_markup=get_qr_keyboard())

@dp.callback_query(lambda c: c.data and c.data.startswith('show_qr_'))
async def process_show_qr_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or callback_query.from_user.first_name
    qr_id_to_show = int(callback_query.data.split('_')[2])

    log_message("CALLBACK", user_id, username, action="–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ QR", details=f"ID: {qr_id_to_show}")

    qr_code_info = None
    if user_id in user_data and 'qr_codes' in user_data[user_id]:
        for qr in user_data[user_id]['qr_codes']['codes']:
            if qr['id'] == qr_id_to_show:
                qr_code_info = qr
                break
    
    if qr_code_info and 'filepath' in qr_code_info:
        filepath = qr_code_info['filepath']
        text = qr_code_info['text']
        try:
            if not os.path.exists(filepath):
                log_message("WARNING", user_id, username, action="–ü–æ–∫–∞–∑ QR –∏–∑ —Å–ø–∏—Å–∫–∞", details=f"–§–∞–π–ª QR –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
                img = qrcode.make(text)
                img.save(filepath)
                log_message("INFO", user_id, username, action="QR —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", details=f"–§–∞–π–ª: {filepath}")

            with open(filepath, "rb") as qr_file_to_send:
                qr_image_file = BufferedInputFile(qr_file_to_send.read(), filename=os.path.basename(filepath))
                await callback_query.message.reply_photo(
                    photo=qr_image_file, 
                    caption=f"QR-–∫–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:\n'{text}'",
                    reply_markup=get_qr_keyboard()
                )
            await callback_query.answer()
            log_message("INFO", user_id, username, action="QR-–∫–æ–¥ –ø–æ–∫–∞–∑–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞", details=f"ID: {qr_id_to_show}, –§–∞–π–ª: {filepath}")

        except FileNotFoundError:
            log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ QR –∏–∑ —Å–ø–∏—Å–∫–∞", details=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            await callback_query.message.reply("–§–∞–π–ª QR-–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_qr_keyboard())
            await callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ QR –∏–∑ —Å–ø–∏—Å–∫–∞", details=str(e))
            await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ QR-–∫–æ–¥–∞.", reply_markup=get_qr_keyboard())
            await callback_query.answer("–û—à–∏–±–∫–∞")
    elif qr_code_info and 'filepath' not in qr_code_info: 
        log_message("WARNING", user_id, username, action="–ü–æ–∫–∞–∑ QR –∏–∑ —Å–ø–∏—Å–∫–∞", details=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –¥–ª—è QR —Å ID {qr_id_to_show} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –ª–µ—Ç—É.")
        try:
            img = qrcode.make(qr_code_info['text'])
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            qr_image_file = BufferedInputFile(img_byte_arr.read(), filename=f"qr_code_{qr_id_to_show}.png")
            await callback_query.message.reply_photo(
                photo=qr_image_file, 
                caption=f"QR-–∫–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ª–µ—Ç—É):\n'{qr_code_info['text']}'",
                reply_markup=get_qr_keyboard()
            )
            await callback_query.answer()
        except Exception as e:
            log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –Ω–∞ –ª–µ—Ç—É", details=str(e))
            await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ QR-–∫–æ–¥–∞.", reply_markup=get_qr_keyboard())
            await callback_query.answer("–û—à–∏–±–∫–∞")
    else:
        log_message("WARNING", user_id, username, action="–ü–æ–∫–∞–∑ QR –∏–∑ —Å–ø–∏—Å–∫–∞", details=f"QR —Å ID {qr_id_to_show} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.message.reply("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_qr_keyboard())
        await callback_query.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")

@dp.message()
async def process_message(message: types.Message):
    try:
        main_menu_buttons = [
            "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç",
            "üîÑ –û—á–∏—Å—Ç–∏—Ç—å",
            "‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            "üñºÔ∏è QR –ö–æ–¥—ã"
        ]
        if message.text in main_menu_buttons:
            return

        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        
        log_message("MESSAGE", user_id, username, action="–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                   details=f"–¢–µ–∫—Å—Ç: {message.text}")
        
        if user_id not in user_data:
            user_data[user_id] = {
                'count': 0,
                'values': {},
                'qr_codes': {'next_qr_id': 1, 'codes': []}
            }
            log_message("INFO", user_id, username, action="–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏", 
                       details="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ä–∞–∑–¥–µ–ª QR")
        elif 'qr_codes' not in user_data[user_id]:
            user_data[user_id]['qr_codes'] = {'next_qr_id': 1, 'codes': []}
            log_message("INFO", user_id, username, action="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏", 
                       details="–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª QR –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        if 'qr_codes' not in user_data[user_id]:
            user_data[user_id]['qr_codes'] = {'next_qr_id': 1, 'codes': []}
        if 'next_qr_id' not in user_data[user_id]['qr_codes']:
            user_data[user_id]['qr_codes']['next_qr_id'] = 1
        if 'codes' not in user_data[user_id]['qr_codes']:
            user_data[user_id]['qr_codes']['codes'] = []
        
        user_data[user_id]['count'] += 1
        
        user_data[user_id]['last_message'] = message.text
        
        lines = message.text.split('\n')
        log_message("DEBUG", user_id, username, action="–†–∞–∑–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è", 
                   details=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        parsed_values = []
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
            
            log_message("DEBUG", user_id, username, action="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏", 
                       details=f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line}")
            
            name, value = parse_line(line)
            if name and value is not None:
                similar_category = find_similar_category(name, user_data[user_id]['values'])
                
                if similar_category != name:
                    log_message("DEBUG", user_id, username, action="–ü–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", 
                               details=f"'{name}' –ø–æ—Ö–æ–∂–∞ –Ω–∞ '{similar_category}'")
                    name = similar_category
                
                old_value = user_data[user_id]['values'].get(name, 0)
                if name in user_data[user_id]['values']:
                    user_data[user_id]['values'][name] += value
                    log_message("DEBUG", user_id, username, action="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è", 
                               details=f"{name}: {old_value} + {value} = {user_data[user_id]['values'][name]}")
                else:
                    user_data[user_id]['values'][name] = value
                    log_message("DEBUG", user_id, username, action="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", 
                               details=f"{name}: {value}")
                parsed_values.append(f"{name}: {value}")
            else:
                log_message("WARNING", user_id, username, action="–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏", 
                           details=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å: {line}")
        
        if parsed_values:
            log_message("INFO", user_id, username, action="–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è", 
                       details=", ".join(parsed_values))
        else:
            log_message("WARNING", user_id, username, action="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                       details="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        log_user_state(user_id)
        save_all_user_data()

        msg_count = user_data[user_id]['count']
        
        is_final_message = (msg_count == 6)
        
        if is_final_message:
            response = ""
            for name, value in user_data[user_id]['values'].items():
                response += f"{name} - {value}\n"
        else:
            progress_bar = create_progress_bar(msg_count, 6)
            response = f"{progress_bar} ({msg_count}/6)\n\n"
            for name, value in user_data[user_id]['values'].items():
                response += f"{name} - {value}\n"
        
        if msg_count == 6:
            log_message("INFO", user_id, username, action="–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", 
                       details="6 –∏–∑ 6")
        
        if msg_count > 6:
            log_message("INFO", user_id, username, action="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", 
                       details="–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —Ü–∏–∫–ª")
            
            current_qr_data = user_data[user_id].get('qr_codes', {'next_qr_id': 1, 'codes': []})
            user_data[user_id] = {
                'count': 1,
                'values': {},
                'qr_codes': current_qr_data 
            }
            
            for line_item in lines: 
                line_item = line_item.strip()
                if not line_item:
                    continue
                name, value = parse_line(line_item)
                if name and value is not None:
                    similar_category = find_similar_category(name, user_data[user_id]['values'])
                    
                    if similar_category != name:
                        log_message("DEBUG", user_id, username, action="–ü–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–æ–≤—ã–π —Ü–∏–∫–ª)", 
                                   details=f"'{name}' –ø–æ—Ö–æ–∂–∞ –Ω–∞ '{similar_category}'")
                        name = similar_category
                    
                    user_data[user_id]['values'][name] = value
                    log_message("DEBUG", user_id, username, action="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–æ–≤—ã–π —Ü–∏–∫–ª)", 
                               details=f"{name}: {value}")
            
            log_user_state(user_id)
            
            progress_bar = create_progress_bar(1, 6)
            response = f"{progress_bar} (1/6)\n\n"
            for name, value in user_data[user_id]['values'].items():
                response += f"{name} - {value}\n"
        
        await message.reply(response, reply_markup=get_keyboard())
    
    except Exception as e:
        current_user_id = message.from_user.id if message and message.from_user else None
        current_username = (message.from_user.username or message.from_user.first_name) if message and message.from_user else None
        log_message("ERROR", current_user_id, current_username, action="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                   details=str(e))
        
        tb = traceback.format_exc()
        print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:{Colors.RESET}\n{tb}")
        
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç.", 
                           reply_markup=get_keyboard())

def string_similarity(s1, s2):
    return difflib.SequenceMatcher(None, s1, s2).ratio()

def remove_trailing_letters(text):
    return re.sub(r'(\d+[.,]?\d*)[–∞-—è–ê-–Øa-zA-Z]+\b', r'\1', text)

def normalize_category_name(name):
    normalized = ' '.join(name.split())
    normalized = remove_trailing_letters(normalized)
    return normalized

def find_similar_category(name, values, similarity_threshold=0.9):
    normalized_name = normalize_category_name(name)
    
    for existing_name in values.keys():
        if normalize_category_name(existing_name) == normalized_name:
            log_message("DEBUG", action="–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", details=f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω: '{name}' -> '{existing_name}'")
            return existing_name
    
    best_match = None
    highest_similarity = 0.0

    for existing_name in values.keys():
        similarity = string_similarity(normalized_name, normalize_category_name(existing_name))
        if similarity >= similarity_threshold and similarity > highest_similarity:
            highest_similarity = similarity
            best_match = existing_name
            
    if best_match:
        log_message("DEBUG", action="–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", details=f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{name}' -> '{best_match}' —Å —Å—Ö–æ–∂–µ—Å—Ç—å—é {highest_similarity:.2f}")
        return best_match
    
    log_message("DEBUG", action="–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", details=f"–ü–æ—Ö–æ–∂–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ—Ä–æ–≥ {similarity_threshold}). –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è.")
    return name

async def main():
    try:
        log_message("SYSTEM", action="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", details="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
        
        load_all_user_data()

        log_message("SYSTEM", action="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", 
                   details=f"–§–∞–π–ª –ª–æ–≥–æ–≤: {LOG_FILE}")
        log_message("SYSTEM", action="–õ–∏–º–∏—Ç—ã", 
                   details=f"–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–∏–∫–ª–µ: 6")
        
        await dp.start_polling(bot)
    except Exception as e:
        log_message("ERROR", action="–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞", details=str(e))
        tb = traceback.format_exc()
        print(f"{Colors.RED}–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:{Colors.RESET}\n{tb}")
    finally:
        log_message("SYSTEM", action="–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", details="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        save_all_user_data()
        await bot.session.close()

if __name__ == '__main__':
    print(f"\n{Colors.BOLD}{Colors.GREEN}==== –ë–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º ===={Colors.RESET}")
    print(f"{Colors.CYAN}–ó–∞–ø—É—Å–∫: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.RESET}\n")
    
    log_message("SYSTEM", action="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", details="–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞")
    asyncio.run(main())