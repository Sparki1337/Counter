from aiogram import Bot, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
import asyncio
import re
import datetime
import os
import json
import difflib
import traceback
from dotenv import load_dotenv

class QRStates(StatesGroup):
    waiting_for_qr_text = State()

class Colors:
    RESET = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"
    
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"
    
    BG_BLACK = "\033[40m"
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"
    BG_MAGENTA = "\033[45m"
    BG_CYAN = "\033[46m"
    BG_WHITE = "\033[47m"

LOG_DIR = "logs"
QR_CODE_DIR = "qrcodes"
LOG_FILE = os.path.join(LOG_DIR, f"bot_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
USER_DATA_FILE = "user_data.json"

os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(QR_CODE_DIR, exist_ok=True)

def log_message(message_type, user_id=None, username=None, action=None, details=None):
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    color_code = Colors.RESET
    if message_type == "ERROR":
        color_code = Colors.RED
    elif message_type == "WARNING":
        color_code = Colors.YELLOW
    elif message_type == "COMMAND":
        color_code = Colors.GREEN
    elif message_type == "MESSAGE":
        color_code = Colors.CYAN
    elif message_type == "INFO":
        color_code = Colors.WHITE
    elif message_type == "SYSTEM":
        color_code = Colors.MAGENTA
    
    user_str = f"{user_id}" if user_id else "---"
    
    username_str = username or "---"
    
    log_str = f"{current_time} {color_code}{message_type.ljust(7)}{Colors.RESET}"
    log_str += f" | {user_str.ljust(10)} | {username_str.ljust(12)}"
    
    if action:
        log_str += f" | {action}"
    
    if details:
        log_str += f": {details}"
    
    print(log_str)
    
    file_log = {
        "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "type": message_type,
        "user_id": user_id,
        "username": username,
        "action": action,
        "details": details
    }
    
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(json.dumps(file_log, ensure_ascii=False) + "\n")

def load_all_user_data():
    global user_data
    try:
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
                data_from_file = json.load(f)
                user_data = {int(k): v for k, v in data_from_file.items()}
                for uid in user_data:
                    if 'qr_codes' not in user_data[uid]:
                        user_data[uid]['qr_codes'] = {'next_qr_id': 1, 'codes': []}
                    if 'next_qr_id' not in user_data[uid]['qr_codes']: 
                         user_data[uid]['qr_codes']['next_qr_id'] = 1
                    if 'codes' not in user_data[uid]['qr_codes']:
                         user_data[uid]['qr_codes']['codes'] = []

                log_message("SYSTEM", action="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", details=f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {USER_DATA_FILE}")
        else:
            user_data = {}
            log_message("SYSTEM", action="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", details=f"–§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è –±–∞–∑–∞.")
    except (json.JSONDecodeError, IOError) as e:
        user_data = {}
        log_message("ERROR", action="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", details=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {USER_DATA_FILE}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è –±–∞–∑–∞.")

def save_all_user_data():
    global user_data
    try:
        data_to_save = {str(k): v for k, v in user_data.items()}
        with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=4)
    except IOError as e:
        log_message("ERROR", action="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", details=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {USER_DATA_FILE}: {e}")

def log_user_state(user_id):
    if user_id not in user_data:
        log_message("DEBUG", user_id, action="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", details="–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    
    state = user_data[user_id]
    count = state.get('count', 0)
    values = state.get('values', {})
    
    log_message("DEBUG", user_id, action="–°–æ—Å—Ç–æ—è–Ω–∏–µ", 
               details=f"–°–æ–æ–±—â–µ–Ω–∏–π: {count}, –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(values)}")
    
    if values:
        values_str = ", ".join([f"{k}={v}" for k, v in values.items()])
        log_message("DEBUG", user_id, action="–ó–Ω–∞—á–µ–Ω–∏—è", details=values_str)

load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

user_data = {}

def get_keyboard():
    buttons = [
        [KeyboardButton(text="üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç")],
        [KeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="üñºÔ∏è QR –ö–æ–¥—ã")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return keyboard

def get_qr_keyboard():
    buttons = [
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å QR")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ QR")],
        [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å QR")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return keyboard

def create_progress_bar(current, total, length=10):
    filled = int(length * current / total)
    return '‚ñà' * filled + '‚ñí' * (length - filled)

def parse_line(line):
    if ':' in line:
        parts = line.split(':')
        separator = ':'
    elif '-' in line:
        parts = line.split('-')
        separator = '-'
    else:
        log_message("DEBUG", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                  details=f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
        return None, None

    if len(parts) >= 2:
        original_name = parts[0].strip()
        name = ' '.join(parts[0].split())
        
        if original_name != name:
            log_message("DEBUG", action="–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏", 
                      details=f"'{original_name}' -> '{name}'")
        
        value_part = parts[1].strip()
        
        try:
            value = int(value_part)
            return name, value
        except ValueError:
            numbers = re.findall(r'-?\d+', value_part)
            if numbers:
                value = int(numbers[-1])
                log_message("DEBUG", action="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞", 
                          details=f"–ò–∑ '{value_part}' –ø–æ–ª—É—á–µ–Ω–æ: {value}")
                return name, value
            else:
                log_message("WARNING", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                          details=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑: {value_part}")
    else:
        log_message("WARNING", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                  details=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
    
    return None, None

def string_similarity(s1, s2):
    return difflib.SequenceMatcher(None, s1, s2).ratio()

def remove_trailing_letters(text):
    return re.sub(r'(\d+[.,]?\d*)[–∞-—è–ê-–Øa-zA-Z]+\b', r'\1', text)

def normalize_category_name(name):
    normalized = ' '.join(name.split())
    normalized = remove_trailing_letters(normalized)
    return normalized

def find_similar_category(name, values, similarity_threshold=0.9):
    normalized_name = normalize_category_name(name)
    
    for existing_name in values.keys():
        if normalize_category_name(existing_name) == normalized_name:
            log_message("DEBUG", action="–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", details=f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω: '{name}' -> '{existing_name}'")
            return existing_name
    
    best_match = None
    highest_similarity = 0.0

    for existing_name in values.keys():
        similarity = string_similarity(normalized_name, normalize_category_name(existing_name))
        if similarity >= similarity_threshold and similarity > highest_similarity:
            highest_similarity = similarity
            best_match = existing_name
            
    if best_match:
        log_message("DEBUG", action="–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", details=f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{name}' -> '{best_match}' —Å —Å—Ö–æ–∂–µ—Å—Ç—å—é {highest_similarity:.2f}")
        return best_match
    
    log_message("DEBUG", action="–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", details=f"–ü–æ—Ö–æ–∂–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ—Ä–æ–≥ {similarity_threshold}). –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è.")
    return name

import handlers

async def main():
    try:
        log_message("SYSTEM", action="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", details="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
        
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            log_message("ERROR", action="–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", details="BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª .env —Å BOT_TOKEN=<–í–ê–®_–¢–û–ö–ï–ù>")
            print(f"{Colors.RED}–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN=<–í–ê–®_–¢–û–ö–ï–ù>{Colors.RESET}")
            return
        
        load_all_user_data()

        log_message("SYSTEM", action="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", 
                   details=f"–§–∞–π–ª –ª–æ–≥–æ–≤: {LOG_FILE}")
        log_message("SYSTEM", action="–õ–∏–º–∏—Ç—ã", 
                   details=f"–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–∏–∫–ª–µ: 6")
        
        await dp.start_polling(bot)
    except Exception as e:
        log_message("ERROR", action="–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞", details=str(e))
        tb = traceback.format_exc()
        print(f"{Colors.RED}–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:{Colors.RESET}\n{tb}")
    finally:
        log_message("SYSTEM", action="–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", details="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        save_all_user_data()
        await bot.session.close()

if __name__ == '__main__':
    print(f"\n{Colors.BOLD}{Colors.GREEN}==== –ë–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º ===={Colors.RESET}")
    print(f"{Colors.CYAN}–ó–∞–ø—É—Å–∫: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.RESET}\n")
    
    log_message("SYSTEM", action="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", details="–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞")
    asyncio.run(main())