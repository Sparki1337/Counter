from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio
import re
import datetime
import os
import json
import difflib

class Colors:
    RESET = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"
    
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"
    
    BG_BLACK = "\033[40m"
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"
    BG_MAGENTA = "\033[45m"
    BG_CYAN = "\033[46m"
    BG_WHITE = "\033[47m"

LOG_DIR = "logs"
LOG_FILE = os.path.join(LOG_DIR, f"bot_{datetime.datetime.now().strftime('%Y%m%d')}.log")

os.makedirs(LOG_DIR, exist_ok=True)

def log_message(message_type, user_id=None, username=None, action=None, details=None):
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    color_code = Colors.RESET
    if message_type == "ERROR":
        color_code = Colors.RED
    elif message_type == "WARNING":
        color_code = Colors.YELLOW
    elif message_type == "COMMAND":
        color_code = Colors.GREEN
    elif message_type == "MESSAGE":
        color_code = Colors.CYAN
    elif message_type == "INFO":
        color_code = Colors.WHITE
    elif message_type == "SYSTEM":
        color_code = Colors.MAGENTA
    
    user_str = f"{user_id}" if user_id else "---"
    
    username_str = username or "---"
    
    log_str = f"{current_time} {color_code}{message_type.ljust(7)}{Colors.RESET}"
    log_str += f" | {user_str.ljust(10)} | {username_str.ljust(12)}"
    
    if action:
        log_str += f" | {action}"
    
    if details:
        if len(details) > 30:
            log_str += f": {details[:27]}..."
        else:
            log_str += f": {details}"
    
    print(log_str)
    
    file_log = {
        "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "type": message_type,
        "user_id": user_id,
        "username": username,
        "action": action,
        "details": details
    }
    
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(json.dumps(file_log, ensure_ascii=False) + "\n")

def log_user_state(user_id):
    if user_id not in user_data:
        log_message("DEBUG", user_id, action="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", details="–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    
    state = user_data[user_id]
    count = state.get('count', 0)
    values = state.get('values', {})
    
    log_message("DEBUG", user_id, action="–°–æ—Å—Ç–æ—è–Ω–∏–µ", 
               details=f"–°–æ–æ–±—â–µ–Ω–∏–π: {count}, –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(values)}")
    
    if values:
        values_str = ", ".join([f"{k}={v}" for k, v in values.items()])
        log_message("DEBUG", user_id, action="–ó–Ω–∞—á–µ–Ω–∏—è", details=values_str)

bot = Bot(token="7813948080:AAGH0qdzgzJdWYl80wYiSp5omPcm95zIOYo")
dp = Dispatcher()

user_data = {}

def get_keyboard():
    buttons = [
        [KeyboardButton(text="üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç")],
        [KeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return keyboard

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    log_message("COMMAND", user_id, username, action="–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
        "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–¥—Å—á–µ—Ç–∞\n"
        "üîÑ –û—á–∏—Å—Ç–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—á–µ—Å—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ - —á–∏—Å–ª–æ",
        reply_markup=get_keyboard()
    )

@dp.message(lambda message: message.text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å")
async def clear_command(message: types.Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        
        log_message("COMMAND", user_id, username, action="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å'")
        
        if user_id in user_data:
            if user_data[user_id]['count'] > 0:
                user_data[user_id]['count'] -= 1
                
                if 'last_message' in user_data[user_id]:
                    last_message = user_data[user_id]['last_message']
                    lines = last_message.split('\n')
                    
                    log_message("DEBUG", user_id, username, action="–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                               details=f"–†–∞–∑–±–æ—Ä {len(lines)} —Å—Ç—Ä–æ–∫")
                    
                    removed_values = []
                    
                    for i, line in enumerate(lines):
                        line = line.strip()
                        if not line:
                            continue
                        
                        log_message("DEBUG", user_id, username, action="–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏", 
                                   details=f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line}")
                        
                        name, value = parse_line(line)
                        if name and value is not None:
                            similar_category = find_similar_category(name, user_data[user_id]['values'])
                            
                            if similar_category != name:
                                log_message("DEBUG", user_id, username, action="–ü–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 
                                           details=f"'{name}' –ø–æ—Ö–æ–∂–∞ –Ω–∞ '{similar_category}'")
                                name = similar_category
                            
                            if name in user_data[user_id]['values']:
                                old_value = user_data[user_id]['values'][name]
                                
                                user_data[user_id]['values'][name] -= value
                                
                                log_message("DEBUG", user_id, username, action="–í—ã—á–∏—Ç–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è", 
                                           details=f"{name}: {old_value} - {value} = {user_data[user_id]['values'][name]}")
                                
                                removed_values.append(f"{name}: {value}")
                            else:
                                log_message("WARNING", user_id, username, action="–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", 
                                           details=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {line}")
                        else:
                            log_message("WARNING", user_id, username, action="–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", 
                                       details=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å: {line}")
                    
                    del user_data[user_id]['last_message']
                    
                    log_message("INFO", user_id, username, action="–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                               details=f"–£–¥–∞–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(removed_values) if removed_values else '–Ω–µ—Ç'}")
                    
                    log_user_state(user_id)
                    
                    msg_count = user_data[user_id]['count']
                    if msg_count == 0:
                        user_data[user_id]['values'] = {}
                        await message.reply("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç.", reply_markup=get_keyboard())
                    else:
                        progress_bar = create_progress_bar(msg_count, 6)
                        response = f"{progress_bar} ({msg_count}/6)\n\n"
                        for name, value in user_data[user_id]['values'].items():
                            response += f"{name} - {value}\n"
                        await message.reply(response, reply_markup=get_keyboard())
                else:
                    log_message("INFO", user_id, username, action="–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                               details="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                    
                    await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_keyboard())
            else:
                log_message("INFO", user_id, username, action="–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                           details="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
                
                await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=get_keyboard())
        else:
            log_message("INFO", user_id, username, action="–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                       details="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            
            await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=get_keyboard())
    
    except Exception as e:
        import traceback
        log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", 
                   details=str(e))
        
        tb = traceback.format_exc()
        print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:{Colors.RESET}\n{tb}")
        
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                           reply_markup=get_keyboard())

@dp.message(lambda message: message.text == "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç")
async def new_count(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    log_message("COMMAND", user_id, username, action="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç'")
    
    user_data[user_id] = {
        'count': 0,
        'values': {}
    }
    
    log_message("INFO", user_id, username, action="–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç", 
               details="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã")
    
    log_user_state(user_id)
    
    await message.reply(
        "–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ - —á–∏—Å–ª–æ",
        reply_markup=get_keyboard()
    )

@dp.message(lambda message: message.text == "‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def show_instructions(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    log_message("COMMAND", user_id, username, action="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'")
    
    instructions = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–¥—Å—á–µ—Ç–∞\n"
        "üîÑ –û—á–∏—Å—Ç–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—á–µ—Å—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ - —á–∏—Å–ª–æ\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—É–º–º–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ê–¢–¢ –ü–ë —ç–∫–∑–æ—Ç–∏–∫ 0,25\" –∏ \"–ê–¢–¢ –ü–ë —ç–∫–∑–æ—Ç–∏–∫ 0,25–ª\" –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π).\n\n"
        "–ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ - 6."
    )
    await message.reply(instructions, reply_markup=get_keyboard())

def create_progress_bar(current, total, length=10):
    filled = int(length * current / total)
    return '‚ñà' * filled + '‚ñí' * (length - filled)

def parse_line(line):
    if ':' in line:
        parts = line.split(':')
        separator = ':'
    elif '-' in line:
        parts = line.split('-')
        separator = '-'
    else:
        log_message("DEBUG", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                  details=f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
        return None, None

    if len(parts) >= 2:
        original_name = parts[0].strip()
        name = ' '.join(parts[0].split())
        
        if original_name != name:
            log_message("DEBUG", action="–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏", 
                      details=f"'{original_name}' -> '{name}'")
        
        value_part = parts[1].strip()
        
        try:
            value = int(value_part)
            return name, value
        except ValueError:
            numbers = re.findall(r'-?\d+', value_part)
            if numbers:
                value = int(numbers[-1])
                log_message("DEBUG", action="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞", 
                          details=f"–ò–∑ '{value_part}' –ø–æ–ª—É—á–µ–Ω–æ: {value}")
                return name, value
            else:
                log_message("WARNING", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                          details=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑: {value_part}")
    else:
        log_message("WARNING", action="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏", 
                  details=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
    
    return None, None

@dp.message()
async def process_message(message: types.Message):
    try:
        if message.text == "‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
            return
            
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        
        log_message("MESSAGE", user_id, username, action="–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                   details=f"–¢–µ–∫—Å—Ç: {message.text}")
        
        if user_id not in user_data:
            user_data[user_id] = {
                'count': 0,
                'values': {}
            }
            log_message("INFO", user_id, username, action="–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                       details="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ")
        
        user_data[user_id]['count'] += 1
        
        user_data[user_id]['last_message'] = message.text
        
        lines = message.text.split('\n')
        log_message("DEBUG", user_id, username, action="–†–∞–∑–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è", 
                   details=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        parsed_values = []
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
            
            log_message("DEBUG", user_id, username, action="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏", 
                       details=f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line}")
            
            name, value = parse_line(line)
            if name and value is not None:
                similar_category = find_similar_category(name, user_data[user_id]['values'])
                
                if similar_category != name:
                    log_message("DEBUG", user_id, username, action="–ü–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", 
                               details=f"'{name}' –ø–æ—Ö–æ–∂–∞ –Ω–∞ '{similar_category}'")
                    name = similar_category
                
                old_value = user_data[user_id]['values'].get(name, 0)
                if name in user_data[user_id]['values']:
                    user_data[user_id]['values'][name] += value
                    log_message("DEBUG", user_id, username, action="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è", 
                               details=f"{name}: {old_value} + {value} = {user_data[user_id]['values'][name]}")
                else:
                    user_data[user_id]['values'][name] = value
                    log_message("DEBUG", user_id, username, action="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", 
                               details=f"{name}: {value}")
                parsed_values.append(f"{name}: {value}")
            else:
                log_message("WARNING", user_id, username, action="–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏", 
                           details=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å: {line}")
        
        if parsed_values:
            log_message("INFO", user_id, username, action="–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è", 
                       details=", ".join(parsed_values))
        else:
            log_message("WARNING", user_id, username, action="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                       details="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        log_user_state(user_id)
        
        msg_count = user_data[user_id]['count']
        
        is_final_message = (msg_count == 6)
        
        if is_final_message:
            response = ""
            for name, value in user_data[user_id]['values'].items():
                response += f"{name} - {value}\n"
        else:
            progress_bar = create_progress_bar(msg_count, 6)
            response = f"{progress_bar} ({msg_count}/6)\n\n"
            for name, value in user_data[user_id]['values'].items():
                response += f"{name} - {value}\n"
        
        if msg_count == 6:
            log_message("INFO", user_id, username, action="–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", 
                       details="6 –∏–∑ 6")
        
        if msg_count > 6:
            log_message("INFO", user_id, username, action="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", 
                       details="–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —Ü–∏–∫–ª")
            
            user_data[user_id] = {
                'count': 1,
                'values': {}
            }
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                name, value = parse_line(line)
                if name and value is not None:
                    similar_category = find_similar_category(name, user_data[user_id]['values'])
                    
                    if similar_category != name:
                        log_message("DEBUG", user_id, username, action="–ü–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–æ–≤—ã–π —Ü–∏–∫–ª)", 
                                   details=f"'{name}' –ø–æ—Ö–æ–∂–∞ –Ω–∞ '{similar_category}'")
                        name = similar_category
                    
                    user_data[user_id]['values'][name] = value
                    log_message("DEBUG", user_id, username, action="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–æ–≤—ã–π —Ü–∏–∫–ª)", 
                               details=f"{name}: {value}")
            
            log_user_state(user_id)
            
            progress_bar = create_progress_bar(1, 6)
            response = f"{progress_bar} (1/6)\n\n"
            for name, value in user_data[user_id]['values'].items():
                response += f"{name} - {value}\n"
        
        await message.reply(response, reply_markup=get_keyboard())
    
    except Exception as e:
        import traceback
        log_message("ERROR", user_id, username, action="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                   details=str(e))
        
        tb = traceback.format_exc()
        print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:{Colors.RESET}\n{tb}")
        
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç.", 
                           reply_markup=get_keyboard())

def string_similarity(s1, s2):
    return difflib.SequenceMatcher(None, s1, s2).ratio()

def remove_trailing_letters(text):
    return re.sub(r'(\d+[.,]?\d*)[–∞-—è–ê-–Øa-zA-Z]+\b', r'\1', text)

def normalize_category_name(name):
    normalized = ' '.join(name.split())
    normalized = remove_trailing_letters(normalized)
    return normalized

def find_similar_category(name, values, similarity_threshold=0.9):
    normalized_name = normalize_category_name(name)
    
    for existing_name in values.keys():
        if normalize_category_name(existing_name) == normalized_name:
            return existing_name
    
    for existing_name in values.keys():
        similarity = string_similarity(normalized_name, normalize_category_name(existing_name))
        if similarity >= similarity_threshold:
            if len(existing_name) <= len(name):
                return existing_name
            else:
                values[name] = values[existing_name]
                del values[existing_name]
                return name
    
    return name

async def main():
    try:
        log_message("SYSTEM", action="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", details="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
        
        log_message("SYSTEM", action="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", 
                   details=f"–§–∞–π–ª –ª–æ–≥–æ–≤: {LOG_FILE}")
        log_message("SYSTEM", action="–õ–∏–º–∏—Ç—ã", 
                   details=f"–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–∏–∫–ª–µ: 6")
        
        await dp.start_polling(bot)
    except Exception as e:
        log_message("ERROR", action="–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞", details=str(e))
        import traceback
        tb = traceback.format_exc()
        print(f"{Colors.RED}–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:{Colors.RESET}\n{tb}")
    finally:
        log_message("SYSTEM", action="–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", details="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        await bot.session.close()

if __name__ == '__main__':
    print(f"\n{Colors.BOLD}{Colors.GREEN}==== –ë–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º ===={Colors.RESET}")
    print(f"{Colors.CYAN}–ó–∞–ø—É—Å–∫: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.RESET}\n")
    
    log_message("SYSTEM", action="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", details="–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞")
    asyncio.run(main()) 